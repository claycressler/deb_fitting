## Energy from soma
## Fitting aP only
source("Growth_reproduction_trajectory_matching_infecteds_model_3.R")

x <- read.csv("Cat_data/all_data.csv") %>% as.data.frame
x2 <- subset(x, infected==1)
data <- x2[,c("day.of.assay","length..mm.","Spore.per.animal")]
colnames(data) <- c("age","length","spores")
## how to deal with 0s?
data$spores[is.na(data$spores)] <- 0

## what if you fix everything except aP?
fixpars <- c(rho=0.152, K=1, km=0.073, v=10, F0=1e6/30, Lobs=0.0102, eP=1/(0.48*33e-9), Pobs=1000)
## unconstrained scale transformation
transform <- rep('log',2)
parorder <- c("rho","K","km","v","F0","Lobs","aP","eP","Pobs")

## Estimate the parameters
box <- cbind(lower=c(aP=1e-10),
             upper=c(aP=1e-4))
sobolDesign(lower=box[,'lower'],
            upper=box[,'upper'],
            nseq=300) %>%
                apply(., 1, as.list) %>%
                    lapply(., unlist) -> guesses

guesses = as.list(seq(1e-10, 1e-2, length=10000))
for (i in 1:10000) names(guesses[[i]]) <- "aP"

## Estimate likelihood
mclapply(guesses,
         optimizer,
         fixpars=fixpars,
         parorder=parorder,
         transform=transform,
         obsdata=data,
         eval.only=TRUE,
         type="trajectory_matching",
         mc.cores=15) %>%
             lapply(., function(x) x$lik) %>%
                 unlist -> guess_lik

guesses[order(guess_lik)[1:15]] -> refine

mclapply(refine,
         optimizer,
         fixpars=fixpars,
         parorder=parorder,
         transform=transform,
         obsdata=data,
         eval.only=FALSE,
         type='trajectory_matching',
         method='Nelder-Mead',
         mc.cores=15) -> refine_lik


pars <- c(refine_lik[[1]]$params, fixpars)
pars[match(parorder, names(pars))] -> pars
try(ode(y0,
        times=seq(0,35,0.1),
        func="derivs",
        parms=pars,
        dllname="tm_deb_parasite_3",
        initfunc="initmod",
        events=list(data=eventdat))) %>% as.data.frame %>%
            mutate(., Wobs=W+E, Lobs=(Wobs/xi)^(1/q)) -> out


