                        alpha=km*fh/(Imax*(v/km)^g),
                        sigma=rho*K/EG,
                        phi=fh*eps*V/(xi*(v/km)^q),
                        beta=EG/ER*(1-K)/K*xi*(v/km)^q))
if (is.loaded("nondim_deb_Cat.so")) dyn.unload("nondim_deb_Cat.so")
system("rm nondim_deb_Cat.so")
system("R CMD SHLIB nondim_deb_Cat.c")
dyn.load("nondim_deb_Cat.so")
## I need a nondimensionalized version of the events and initial conditions
nondim_y0 <- c(y0["F"]/scalars["f_scalar"],
               W=unname(y0["E"]/y0["V"]/scalars["w_scalar"]),
               L=unname(((y0["V"]/pars["xi"])^(1/pars["q"]))/scalars["l_scalar"]),
               R=0)
nondim_eventdat <- eventdat
nondim_eventdat$time <- nondim_eventdat$time/unname(scalars["t_scalar"])
nondim_eventdat$value <- nondim_eventdat$value/unname(scalars["f_scalar"])
ode(nondim_y0,
    times=seq(0,1000),
    func="derivs",
    parms=nondim_pars,
    dllname="nondim_deb_Cat",
    initfunc="initmod"
    ) -> nondim_out
nondim_out
nondim_eventdat
nondim_eventdat <- eventdat
nondim_eventdat$time <- round(nondim_eventdat$time/unname(scalars["t_scalar"]),2),
nondim_eventdat$value <- nondim_eventdat$value/unname(scalars["f_scalar"])
nondim_eventdat$time <- round(nondim_eventdat$time/unname(scalars["t_scalar"]),2)
nondim_eventdat$value <- nondim_eventdat$value/unname(scalars["f_scalar"])
nondim_eventdat
nondim_eventdat <- eventdat
nondim_eventdat$time <- round(nondim_eventdat$time/unname(scalars["t_scalar"]),2)
nondim_eventdat$value <- nondim_eventdat$value/unname(scalars["f_scalar"])
nondim_eventdat
ode(nondim_y0,
    times=seq(0,20000),
    func="derivs",
    parms=nondim_pars,
    dllname="nondim_deb_Cat",
    initfunc="initmod"
    ) -> nondim_out
ode(nondim_y0,
    times=seq(0,20000,0.01),
    func="derivs",
    parms=nondim_pars,
    dllname="nondim_deb_Cat",
    initfunc="initmod",
    events=list(data=nondim_eventdat)
    ) -> nondim_out
tail(nondim_out)
nondim_eventdat <- eventdat
nondim_eventdat$time <- round(nondim_eventdat$time/unname(scalars["t_scalar"]))
nondim_eventdat$value <- nondim_eventdat$value/unname(scalars["f_scalar"])
nondim_eventdat
if (is.loaded("nondim_deb_Cat.so")) dyn.unload("nondim_deb_Cat.so")
system("rm nondim_deb_Cat.so")
system("R CMD SHLIB nondim_deb_Cat.c")
dyn.load("nondim_deb_Cat.so")
try(ode(nondim_y0,
        times=seq(0,35/unname(scalars["t_scalar"])),
        func="derivs",
        parms=nondim_pars,
        dllname="nondim_deb_Cat",
        initfunc="initmod",
        events=list(data=nondim_eventdat)
        )) -> nondim_out
tail(nondim_out)
nondim_out %>% as.data.frame %>%
    mutate(.,
           time=time*scalars["t_scalar"],
           F=F*scalars["f_scalar"],
           W=W*scalars["w_scalar"],
           L=L*scalars["l_scalar"]) -> nondim_out_2
tail(nondim_out_2)
tail(out)
with(out, plot(time, F, type='l'))
with(nondim_out_2, lines(time, F, col=2))
with(out, plot(time, F, type='l', xlim=c(15,35), ylim=c(0,40000)))
with(nondim_out_2, lines(time, F, col=2))
with(out, plot(time, F, type='l'))
with(nondim_out_2, lines(time, F, col=2))
with(out, plot(time, L, type='l'))
with(nondim_out_2, lines(time, L, col=2))
with(out, plot(time, L, type='l', ylim=c(0.3,4)))
with(nondim_out_2, lines(time, L, col=2))
source("Growth_reproduction_trajectory_fitting_functions_Cat_2.R")
fh <- 1e-4/44.5e-9 ## about 2250 cells/ml
pars <- c(Imax=calc_Imax(fh), # fixed based on feeding data fitting and fh value
          fh=fh, # estimated from fitting growth/reproduction data
          g=calc_g(fh), # fixed based on feeding data fitting and fh value
          rho=0.1, # estimated from fitting growth/reproduction data
          eps=44.5e-9, # fixed based on measured carbon content of algae
          V=30, # fixed based on experimental conditions
          F0=1000000/30, # fixed based on experimental conditions
          xi=1.8e-3, # fixed based on Hall et al. 2009 length-weight regression
          q=3, # fixed based on Hall et al. 2009 length-weight regression
          K=0.5, # estimated from growth/reproduction data
          km=0.01, # estimated from growth/reproduction data
          ER=0.000225, # fixed mass at birth
          v=2, # fixed based on the fact that it doesn't affect the fitting
          EG=1.5,
          Lobs=0.1,
          Winit=0.000225, ## fixed mass at birth
          Wmat=0.002) ## fixed mass at maturity
y0 <- c(F=unname(pars["F0"]),
        E=unname(pars["Winit"]/2),
        V=unname(pars["Winit"]/2),
        R=0)
eventdat <- data.frame(var="F",
                       time=1:35,
                       value=unname(pars["F0"]),
                       method=rep(c(rep("add",4),"rep"),35/5))
try(ode(y0,
        times=seq(0,35,0.01),
        func="derivs",
        parms=pars,
        dllname="deb_Cat_2",
        initfunc="initmod",
        events=list(data=eventdat)
        )) -> out
## turn into length
out %>%
    as.data.frame %>%
        mutate(L=(V/unname(pars["xi"]))^(1/unname(pars["q"]))) -> out
tail(out)
if (is.loaded("standard_deb.so")) dyn.unload("standard_deb.so")
system("rm standard_deb.so")
system("R CMD SHLIB standard_deb.c")
dyn.load("standard_deb.so")
fh <- 1e-4/44.5e-9 ## about 2250 cells/ml
pars <- c(Imax=calc_Imax(fh), # fixed based on feeding data fitting and fh value
          fh=fh, # estimated from fitting growth/reproduction data
          g=calc_g(fh), # fixed based on feeding data fitting and fh value
          rho=0.1, # estimated from fitting growth/reproduction data
          eps=44.5e-9, # fixed based on measured carbon content of algae
          V=30, # fixed based on experimental conditions
          F0=1000000/30, # fixed based on experimental conditions
          xi=1.8e-3, # fixed based on Hall et al. 2009 length-weight regression
          q=3, # fixed based on Hall et al. 2009 length-weight regression
          K=0.5, # estimated from growth/reproduction data
          km=0.01, # estimated from growth/reproduction data
          ER=0.000225, # fixed mass at birth
          v=2, # fixed based on the fact that it doesn't affect the fitting
          EG=1.5,
          Lobs=0.1,
          Winit=0.000225, ## fixed mass at birth
          Wmat=0.002) ## fixed mass at maturity
y0 <- c(F=unname(pars["F0"]),
        E=unname(pars["Winit"]/2),
        V=unname(pars["Winit"]/2),
        R=0)
eventdat <- data.frame(var="F",
                       time=1:35,
                       value=unname(pars["F0"]),
                       method=rep(c(rep("add",4),"rep"),35/5))
try(ode(y0,
        times=seq(0,35,0.01),
        func="derivs",
        parms=pars,
        dllname="deb_Cat_2",
        initfunc="initmod",
        events=list(data=eventdat)
        )) -> out
## turn into length
out %>%
    as.data.frame %>%
        mutate(L=(V/unname(pars["xi"]))^(1/unname(pars["q"]))) -> out
tail(out)
with(out, plot(time, F, type='l'))
with(nondim_out_2, lines(time, F, col=2))
head(out)
head(nondim_out)
head(nondim_out_2)
try(ode(y0,
        times=seq(0,35,0.01),
        func="derivs",
        parms=pars,
        dllname="deb_Cat_2",
        initfunc="initmod",
        events=list(data=eventdat)
        )) -> out
## turn into length
out %>%
    as.data.frame %>%
        mutate(L=(V/unname(pars["xi"]))^(1/unname(pars["q"])),
               W=E/V) -> out
head(out)
head(nondim_out_2)
nondim_out_2$time==0.01
nondim_out_2$time==0.01 %>% which
which(nondim_out_2$time==0.01)
nondim_out_2 %>% dim
head(nondim_out_2,100)
with(out, plot(time, W, type='l'))
with(nondim_out_2, lines(time, W, col=2))
if (is.loaded("standard_deb.so")) dyn.unload("standard_deb.so")
system("rm standard_deb.so")
system("R CMD SHLIB standard_deb.c")
dyn.load("standard_deb.so")
## confirming the identicalness of the dimensional and dimensionless DEB models
fh <- 1e-4/44.5e-9 ## about 2250 cells/ml
pars <- c(Imax=calc_Imax(fh), # fixed based on feeding data fitting and fh value
          fh=fh, # estimated from fitting growth/reproduction data
          g=calc_g(fh), # fixed based on feeding data fitting and fh value
          rho=0.1, # estimated from fitting growth/reproduction data
          eps=44.5e-9, # fixed based on measured carbon content of algae
          V=30, # fixed based on experimental conditions
          F0=1000000/30, # fixed based on experimental conditions
          xi=1.8e-3, # fixed based on Hall et al. 2009 length-weight regression
          q=3, # fixed based on Hall et al. 2009 length-weight regression
          K=0.5, # estimated from growth/reproduction data
          km=0.01, # estimated from growth/reproduction data
          ER=0.000225, # fixed mass at birth
          v=2, # fixed based on the fact that it doesn't affect the fitting
          EG=1.5,
          Lobs=0.1,
          Winit=0.000225, ## fixed mass at birth
          Wmat=0.002) ## fixed mass at maturity
y0 <- c(F=unname(pars["F0"]),
        E=unname(pars["Winit"]/2),
        V=unname(pars["Winit"]/2),
        R=0,
        W=1)
eventdat <- data.frame(var="F",
                       time=1:35,
                       value=unname(pars["F0"]),
                       method=rep(c(rep("add",4),"rep"),35/5))
try(ode(y0,
        times=seq(0,35,0.01),
        func="derivs",
        parms=pars,
        dllname="deb_Cat_2",
        initfunc="initmod",
        events=list(data=eventdat)
        )) -> out
tail(out)
pars
y0
out$W
out['W']
out[,'W']
if (is.loaded("standard_deb.so")) dyn.unload("standard_deb.so")
system("rm standard_deb.so")
system("R CMD SHLIB standard_deb.c")
dyn.load("standard_deb.so")
## confirming the identicalness of the dimensional and dimensionless DEB models
fh <- 1e-4/44.5e-9 ## about 2250 cells/ml
pars <- c(Imax=calc_Imax(fh), # fixed based on feeding data fitting and fh value
          fh=fh, # estimated from fitting growth/reproduction data
          g=calc_g(fh), # fixed based on feeding data fitting and fh value
          rho=0.1, # estimated from fitting growth/reproduction data
          eps=44.5e-9, # fixed based on measured carbon content of algae
          V=30, # fixed based on experimental conditions
          F0=1000000/30, # fixed based on experimental conditions
          xi=1.8e-3, # fixed based on Hall et al. 2009 length-weight regression
          q=3, # fixed based on Hall et al. 2009 length-weight regression
          K=0.5, # estimated from growth/reproduction data
          km=0.01, # estimated from growth/reproduction data
          ER=0.000225, # fixed mass at birth
          v=2, # fixed based on the fact that it doesn't affect the fitting
          EG=1.5,
          Lobs=0.1,
          Winit=0.000225, ## fixed mass at birth
          Wmat=0.002) ## fixed mass at maturity
y0 <- c(F=unname(pars["F0"]),
        E=unname(pars["Winit"]/2),
        V=unname(pars["Winit"]/2),
        R=0,
        W=1)
eventdat <- data.frame(var="F",
                       time=1:35,
                       value=unname(pars["F0"]),
                       method=rep(c(rep("add",4),"rep"),35/5))
try(ode(y0,
        times=seq(0,35,0.01),
        func="derivs",
        parms=pars,
        dllname="deb_Cat_2",
        initfunc="initmod",
        events=list(data=eventdat)
        )) -> out
try(ode(y0,
        times=seq(0,35,0.01),
        func="derivs",
        parms=pars,
        dllname="standard_deb",
        initfunc="initmod",
        events=list(data=eventdat)
        )) -> out
if (is.loaded("standard_deb.so")) dyn.unload("standard_deb.so")
system("rm standard_deb.so")
system("R CMD SHLIB standard_deb.c")
dyn.load("standard_deb.so")
## confirming the identicalness of the dimensional and dimensionless DEB models
fh <- 1e-4/44.5e-9 ## about 2250 cells/ml
pars <- c(Imax=calc_Imax(fh), # fixed based on feeding data fitting and fh value
          fh=fh, # estimated from fitting growth/reproduction data
          g=calc_g(fh), # fixed based on feeding data fitting and fh value
          rho=0.1, # estimated from fitting growth/reproduction data
          eps=44.5e-9, # fixed based on measured carbon content of algae
          V=30, # fixed based on experimental conditions
          F0=1000000/30, # fixed based on experimental conditions
          xi=1.8e-3, # fixed based on Hall et al. 2009 length-weight regression
          q=3, # fixed based on Hall et al. 2009 length-weight regression
          K=0.5, # estimated from growth/reproduction data
          km=0.01, # estimated from growth/reproduction data
          ER=0.000225, # fixed mass at birth
          v=2, # fixed based on the fact that it doesn't affect the fitting
          EG=1.5,
          Lobs=0.1,
          Winit=0.000225, ## fixed mass at birth
          Wmat=0.002) ## fixed mass at maturity
y0 <- c(F=unname(pars["F0"]),
        E=unname(pars["Winit"]/2),
        V=unname(pars["Winit"]/2),
        R=0,
        W=1)
eventdat <- data.frame(var="F",
                       time=1:35,
                       value=unname(pars["F0"]),
                       method=rep(c(rep("add",4),"rep"),35/5))
try(ode(y0,
        times=seq(0,35,0.01),
        func="derivs",
        parms=pars,
        dllname="standard_deb",
        initfunc="initmod",
        events=list(data=eventdat)
        )) -> out
tail(out)
out %>%
    as.data.frame %>%
        mutate(L=(V/unname(pars["xi"]))^(1/unname(pars["q"])),
               W2=E/V) -> out
tail(out)
if (is.loaded("standard_deb_2.so")) dyn.unload("standard_deb_2.so")
system("rm standard_deb_2.so")
system("R CMD SHLIB standard_deb_2.c")
dyn.load("standard_deb_2.so")
y02 <- c(F=unname(pars["F0"]),
         W=unname(y0["E"]/y0["V"]), 
         L=unname((y0["V"]/pars["xi"])^(1/pars["q"])),
         R=0)
try(ode(y02,
        times=seq(0,35,0.01),
        func="derivs",
        parms=pars,
        dllname="standard_deb_2",
        initfunc="initmod",
        events=list(data=eventdat)
        )) -> out2
tail(out2)
tail(out)
out %>%
    as.data.frame %>%
        mutate(L2=(V/unname(pars["xi"]))^(1/unname(pars["q"])),
               W2=E/V) -> out
if (is.loaded("standard_deb.so")) dyn.unload("standard_deb.so")
system("rm standard_deb.so")
system("R CMD SHLIB standard_deb.c")
dyn.load("standard_deb.so")
y0 <- c(F=unname(pars["F0"]),
        E=unname(pars["Winit"]/2),
        V=unname(pars["Winit"]/2),
        R=0)
try(ode(y0,
        times=seq(0,35,0.01),
        func="derivs",
        parms=pars,
        dllname="standard_deb",
        initfunc="initmod",
        events=list(data=eventdat)
        )) -> out
## confirming that I correctly derived the ODEs for L and W from the equations for E and V
if (is.loaded("standard_deb_2.so")) dyn.unload("standard_deb_2.so")
system("rm standard_deb_2.so")
system("R CMD SHLIB standard_deb_2.c")
dyn.load("standard_deb_2.so")
y02 <- c(F=unname(pars["F0"]),
         W=unname(y0["E"]/y0["V"]),
         L=unname((y0["V"]/pars["xi"])^(1/pars["q"])),
         R=0)
try(ode(y02,
        times=seq(0,35,0.01),
        func="derivs",
        parms=pars,
        dllname="standard_deb_2",
        initfunc="initmod",
        events=list(data=eventdat)
        )) -> out2
out %>%
    as.data.frame %>%
        mutate(L2=(V/unname(pars["xi"]))^(1/unname(pars["q"])),
               W2=E/V) -> out
tail(out2)
tail(out)
scalars
p
with(p, fh*km^g/Imax/v^g)
pars
pars["fh"]
pars["fh"]/(pars["Imax"]*(pars["v"]/pars["km"])^pars["g"])
pars["fh"]*pars["km"]^g/pars["Imax"]/pars["v"]^g
pars["fh"]*pars["km"]^g/pars["Imax"]/pars["v"]^pars["g"]
pars["fh"]*pars["km"]^pars["g"]/pars["Imax"]/pars["v"]^pars["g"]
try(ode(nondim_y0,
        times=seq(0,35,0.01)/unname(scalars["t_scalar"]),
        func="derivs",
        parms=nondim_pars,
        dllname="nondim_deb_Cat",
        initfunc="initmod",
        events=list(data=nondim_eventdat)
        )) -> nondim_out
nondim_out %>% as.data.frame %>%
    mutate(.,
           time=time*scalars["t_scalar"],
           F=F*scalars["f_scalar"],
           W=W*scalars["w_scalar"],
           L=L*scalars["l_scalar"]) -> nondim_out_2
head(nondim_out_2)
head(out)
head(out2)
head(nondim_out_2)
try(ode(y02,
        times=seq(0,35,0.0001),
        func="derivs",
        parms=pars,
        dllname="standard_deb_2",
        initfunc="initmod",
        events=list(data=eventdat)
        )) -> out2
try(ode(nondim_y0,
        times=seq(0,35,0.0001)/unname(scalars["t_scalar"]),
        func="derivs",
        parms=nondim_pars,
        dllname="nondim_deb_Cat",
        initfunc="initmod",
        events=list(data=nondim_eventdat)
        )) -> nondim_out
head(out2)
head(nondim_out)
nondim_out %>% as.data.frame %>%
    mutate(.,
           time=time*scalars["t_scalar"],
           F=F*scalars["f_scalar"],
           W=W*scalars["w_scalar"],
           L=L*scalars["l_scalar"]) -> nondim_out_2
head(out2)
head(nondim_out_2)
if (is.loaded("nondim_deb_Cat.so")) dyn.unload("nondim_deb_Cat.so")
system("rm nondim_deb_Cat.so")
system("R CMD SHLIB nondim_deb_Cat.c")
dyn.load("nondim_deb_Cat.so")
## I need a nondimensionalized version of the events and initial conditions
nondim_y0 <- c(y0["F"]/scalars["f_scalar"],
               W=unname(y0["E"]/y0["V"]/scalars["w_scalar"]),
               L=unname(((y0["V"]/pars["xi"])^(1/pars["q"]))/scalars["l_scalar"]),
               R=0)
nondim_eventdat <- eventdat
nondim_eventdat$time <- round(nondim_eventdat$time/unname(scalars["t_scalar"]))
nondim_eventdat$value <- nondim_eventdat$value/unname(scalars["f_scalar"])
try(ode(nondim_y0,
        times=seq(0,35,0.0001)/unname(scalars["t_scalar"]),
        func="derivs",
        parms=nondim_pars,
        dllname="nondim_deb_Cat",
        initfunc="initmod",
        events=list(data=nondim_eventdat)
        )) -> nondim_out
nondim_out %>% as.data.frame %>%
    mutate(.,
           time=time*scalars["t_scalar"],
           F=F*scalars["f_scalar"],
           W=W*scalars["w_scalar"],
           L=L*scalars["l_scalar"]) -> nondim_out_2
head(nondim_out_2)
head(out2)
tail(out2)
tail(nondim_out_2)
try(ode(y02,
        times=seq(0,35,0.1),
        func="derivs",
        parms=pars,
        dllname="standard_deb_2",
        initfunc="initmod",
        events=list(data=eventdat)
        )) -> out2
try(ode(nondim_y0,
        times=seq(0,35,0.1)/unname(scalars["t_scalar"]),
        func="derivs",
        parms=nondim_pars,
        dllname="nondim_deb_Cat",
        initfunc="initmod",
        events=list(data=nondim_eventdat)
        )) -> nondim_out
nondim_out %>% as.data.frame %>%
    mutate(.,
           time=time*scalars["t_scalar"],
           F=F*scalars["f_scalar"],
           W=W*scalars["w_scalar"],
           L=L*scalars["l_scalar"]) -> nondim_out_2
nondim_eventdat$time <- round(nondim_eventdat$time/unname(scalars["t_scalar"]),2)
nondim_eventdat$value <- nondim_eventdat$value/unname(scalars["f_scalar"])
try(ode(nondim_y0,
        times=seq(0,35,0.1)/unname(scalars["t_scalar"]),
        func="derivs",
        parms=nondim_pars,
        dllname="nondim_deb_Cat",
        initfunc="initmod",
        events=list(data=nondim_eventdat)
        )) -> nondim_out
